NAME

  git-cppr

SYNOPSIS

  git-cppr -o | --our_repo <remote/github repo> (-t | --target_branch <branch>)...
     -m | --my_remote <remote>
     -p | --prefix <temp branch prefix> <commit/pull request URL(s)>...

  git-cppr --continue | --skip | --abort

  git-cppr --help

DESCRIPTION

git cppr provides a way to create pull requests in parallel against
multiple branches from a common set of commits (and/or pull
requests).

TERMINOLOGY

  Base fork  
    This is the github repository to which pull requests will be
    submitted. Typically this will be the central project repository.

  Head fork  
    This is the github repository from which pull requests will be
    created. Typically this will be your personal fork of a central
    project repository.

OPTIONS

  -o|--our_repo <remote/github repo>  
    Tracked repository or github fork

  Specifies base fork to create pull requests against

  -t|--target_branch <branch> ...  
    Branch(es) to create pull requests against.

  You can specify multiple branches by giving the option more than
  once (e.g. -t branch1 -t branch2)

  -m|--my_remote <remote>  
    Tracked repository to push topic branches to

  This will be used as the head fork for creating the pull requests

  -p|--prefix <prefix>  
    String to prepend to target branch names when creating topic branches

  Topic branches will be named like "prefix-target_branch"

  <commit/pull request URL(s)>...  
    One or several commits to cherry-pick into each topic branch.

  Commits can be any valid git-cherry-pick(1) commit, or github pull
  request URLs

ACTIONS

  --continue  
    Attempt to restart the parallel pull request process after
    resolving merge conflicts or validation problems with the
    underlying cherry-pick and pull-request processes
    
  --skip  
    Halt handling the current target branch only

  If the current topic branch has not yet been pushed to the topic
  branch remote (my_remote), this will abort, if needed, the running
  cherry-pick and remove the topic branch from the local
  repository. If the topic branch has been pushed, it will remove the
  topic branch from the list of branches to base pull requests from,
  but will not remove it from the local repository or tracked
  repository specified by my_remote.

  git-cppr will resume handling any remaining unprocessed target
  branches.

  --abort  
    Halt handling current and remaining target branches

  Any topic branches which have been pushed to the tracked repository
  specified by my_remote will not be removed from the remote or local
  repositories. Topic branches which haven't had changes cherry-picked
  into them will be removed. Pull requests which have already been
  created will not be cancelled.

APPLICATION USAGE

git-cppr creates pull requests against a base fork by cherry-picking changes into unique topic branches in the head fork. git-cppr makes the following assumptions:

* the specified base fork is either a remote repository or is specified like "owner:repo"
* each --target-branch specified matches a branch on the base fork
* the head fork is available as a remote repository



EXAMPLES

A set of changes has been introduced as a pull request to an upstream fork "their-foo" of a project called "our-foo" you're working on. You need to apply the commits from that pull request to two branches in your project's fork. Typically this would involve the following steps for each branch:
* Update/add the upstream fork remote "their-foo":
  git fetch their-foo
* switch to the target branch (or create a new topic branch)
  git checkout -b topic-branch our-foo/target-branch
* cherry-pick the commits into the topic branch in your local repo
  git cherry-pick their-foo-COMMIT1 their-foo-COMMIT2 ...
* push the updated branch to your development fork (my-foo)
  git push my-foo topic-branch:topic-branch
* create a pull request against the project fork (our-foo) via github.com or the hub(1) command:
  git pull-request -b our-foo:target-branch -h my-foo:topic-branch


EXIT STATUS

WARNINGS

  git version >= 1.8.0 is required

  A recent version of hub is required - http://hub.github.com/

SEE ALSO
  git-pcp(1), git-ppr(1), hub(1)
AUTHOR
  John Lamb <jolamb@redhat.com> - man page written for OpenShift
